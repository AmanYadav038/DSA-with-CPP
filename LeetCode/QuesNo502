class Solution {
public:
    int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
        int n = profits.size();
        vector<pair<int, int>> projects;
        for (int i = 0; i < n; i++) {
            projects.push_back({capital[i], profits[i]});
        }
        sort(projects.begin(), projects.end());

        priority_queue<int> maxProfits;
        int current = 0;

        for (int i = 0; i < k; i++) {
        // Add all affordable projects to the max-heap
            while (current < n && projects[current].first <= w) {
                maxProfits.push(projects[current].second);
                current++;
            }
        // If there are no affordable projects, break out of the loop
            if (maxProfits.empty()) {
                break;
            }
        // Select the project with the maximum profit
            w += maxProfits.top();
            maxProfits.pop();
        }

    return w;
}
};
